/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface CitizenNFTInterface extends utils.Interface {
  functions: {
    "awardCitizenship(address[],uint256[],uint256)": FunctionFragment;
    "balanceOf(address,uint256)": FunctionFragment;
    "balanceOfBatch(address[],uint256[])": FunctionFragment;
    "changeURIs(string[],uint256[])": FunctionFragment;
    "defaultRoyalty()": FunctionFragment;
    "howManyReservedCitizenships()": FunctionFragment;
    "initialCitizenship()": FunctionFragment;
    "inquireAboutHistory()": FunctionFragment;
    "inquireCostOfEntry()": FunctionFragment;
    "inquireHousingNumbers()": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "issueNewCitizenships(address,uint256,uint256)": FunctionFragment;
    "legislateCostOfEntry(uint256)": FunctionFragment;
    "onlineApplicationForCitizenship(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "raidTheCoffers()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "reserveCitizenships(uint256)": FunctionFragment;
    "royaltyInfo(uint256,uint256)": FunctionFragment;
    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setDefaultRoyalty(address,uint16)": FunctionFragment;
    "setTokenRoyalty(uint256,address,uint16)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uri(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "awardCitizenship",
    values: [string[], BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "changeURIs",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultRoyalty",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "howManyReservedCitizenships",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialCitizenship",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "inquireAboutHistory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "inquireCostOfEntry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "inquireHousingNumbers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "issueNewCitizenships",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "legislateCostOfEntry",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onlineApplicationForCitizenship",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "raidTheCoffers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reserveCitizenships",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyInfo",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultRoyalty",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenRoyalty",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "uri", values: [BigNumberish]): string;

  decodeFunctionResult(
    functionFragment: "awardCitizenship",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "changeURIs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "defaultRoyalty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "howManyReservedCitizenships",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialCitizenship",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inquireAboutHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inquireCostOfEntry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inquireHousingNumbers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issueNewCitizenships",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "legislateCostOfEntry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onlineApplicationForCitizenship",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "raidTheCoffers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveCitizenships",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultRoyalty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenRoyalty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;

  events: {
    "ApprovalForAll(address,address,bool)": EventFragment;
    "CitizenLegislatureChanged(string,uint256)": EventFragment;
    "DefaultRoyaltySet(address,uint16)": EventFragment;
    "LogEthDeposit(address)": EventFragment;
    "NewCitizen(address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TokenRoyaltySet(uint256,address,uint16)": EventFragment;
    "TransferBatch(address,address,address,uint256[],uint256[])": EventFragment;
    "TransferSingle(address,address,address,uint256,uint256)": EventFragment;
    "URI(string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CitizenLegislatureChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DefaultRoyaltySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogEthDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewCitizen"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenRoyaltySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferSingle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "URI"): EventFragment;
}

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  { account: string; operator: string; approved: boolean }
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export type CitizenLegislatureChangedEvent = TypedEvent<
  [string, BigNumber],
  { arg0: string; arg1: BigNumber }
>;

export type CitizenLegislatureChangedEventFilter =
  TypedEventFilter<CitizenLegislatureChangedEvent>;

export type DefaultRoyaltySetEvent = TypedEvent<
  [string, number],
  { recipient: string; bps: number }
>;

export type DefaultRoyaltySetEventFilter =
  TypedEventFilter<DefaultRoyaltySetEvent>;

export type LogEthDepositEvent = TypedEvent<[string], { arg0: string }>;

export type LogEthDepositEventFilter = TypedEventFilter<LogEthDepositEvent>;

export type NewCitizenEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { arg0: string; arg1: BigNumber; arg2: BigNumber }
>;

export type NewCitizenEventFilter = TypedEventFilter<NewCitizenEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type TokenRoyaltySetEvent = TypedEvent<
  [BigNumber, string, number],
  { tokenId: BigNumber; recipient: string; bps: number }
>;

export type TokenRoyaltySetEventFilter = TypedEventFilter<TokenRoyaltySetEvent>;

export type TransferBatchEvent = TypedEvent<
  [string, string, string, BigNumber[], BigNumber[]],
  {
    operator: string;
    from: string;
    to: string;
    ids: BigNumber[];
    values: BigNumber[];
  }
>;

export type TransferBatchEventFilter = TypedEventFilter<TransferBatchEvent>;

export type TransferSingleEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  {
    operator: string;
    from: string;
    to: string;
    id: BigNumber;
    value: BigNumber;
  }
>;

export type TransferSingleEventFilter = TypedEventFilter<TransferSingleEvent>;

export type URIEvent = TypedEvent<
  [string, BigNumber],
  { value: string; id: BigNumber }
>;

export type URIEventFilter = TypedEventFilter<URIEvent>;

export interface CitizenNFT extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CitizenNFTInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    awardCitizenship(
      _awardees: string[],
      _numberOfCitizenships: BigNumberish[],
      _citizenshipType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    changeURIs(
      _tokenURIs: string[],
      _citizenNFTIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    defaultRoyalty(
      overrides?: CallOverrides
    ): Promise<[string, number] & { recipient: string; bps: number }>;

    howManyReservedCitizenships(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialCitizenship(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    inquireAboutHistory(overrides?: CallOverrides): Promise<[BigNumber]>;

    inquireCostOfEntry(overrides?: CallOverrides): Promise<[BigNumber]>;

    inquireHousingNumbers(overrides?: CallOverrides): Promise<[BigNumber]>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    issueNewCitizenships(
      _to: string,
      _citizenType: BigNumberish,
      _numberOfCitizens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    legislateCostOfEntry(
      _stampCost: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onlineApplicationForCitizenship(
      _citizenNumber: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    raidTheCoffers(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reserveCitizenships(
      _numberOfCitizenships: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    royaltyInfo(
      tokenId: BigNumberish,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDefaultRoyalty(
      recipient: string,
      bps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenRoyalty(
      tokenId: BigNumberish,
      recipient: string,
      bps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uri(
      _citizenNFTId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  awardCitizenship(
    _awardees: string[],
    _numberOfCitizenships: BigNumberish[],
    _citizenshipType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    account: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfBatch(
    accounts: string[],
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  changeURIs(
    _tokenURIs: string[],
    _citizenNFTIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  defaultRoyalty(
    overrides?: CallOverrides
  ): Promise<[string, number] & { recipient: string; bps: number }>;

  howManyReservedCitizenships(overrides?: CallOverrides): Promise<BigNumber>;

  initialCitizenship(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  inquireAboutHistory(overrides?: CallOverrides): Promise<BigNumber>;

  inquireCostOfEntry(overrides?: CallOverrides): Promise<BigNumber>;

  inquireHousingNumbers(overrides?: CallOverrides): Promise<BigNumber>;

  isApprovedForAll(
    account: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  issueNewCitizenships(
    _to: string,
    _citizenType: BigNumberish,
    _numberOfCitizens: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  legislateCostOfEntry(
    _stampCost: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onlineApplicationForCitizenship(
    _citizenNumber: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  raidTheCoffers(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reserveCitizenships(
    _numberOfCitizenships: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  royaltyInfo(
    tokenId: BigNumberish,
    value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber]>;

  safeBatchTransferFrom(
    from: string,
    to: string,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeTransferFrom(
    from: string,
    to: string,
    id: BigNumberish,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDefaultRoyalty(
    recipient: string,
    bps: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenRoyalty(
    tokenId: BigNumberish,
    recipient: string,
    bps: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uri(_citizenNFTId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    awardCitizenship(
      _awardees: string[],
      _numberOfCitizenships: BigNumberish[],
      _citizenshipType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    changeURIs(
      _tokenURIs: string[],
      _citizenNFTIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    defaultRoyalty(
      overrides?: CallOverrides
    ): Promise<[string, number] & { recipient: string; bps: number }>;

    howManyReservedCitizenships(overrides?: CallOverrides): Promise<BigNumber>;

    initialCitizenship(overrides?: CallOverrides): Promise<void>;

    inquireAboutHistory(overrides?: CallOverrides): Promise<BigNumber>;

    inquireCostOfEntry(overrides?: CallOverrides): Promise<BigNumber>;

    inquireHousingNumbers(overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    issueNewCitizenships(
      _to: string,
      _citizenType: BigNumberish,
      _numberOfCitizens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    legislateCostOfEntry(
      _stampCost: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    onlineApplicationForCitizenship(
      _citizenNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    raidTheCoffers(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    reserveCitizenships(
      _numberOfCitizenships: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    royaltyInfo(
      tokenId: BigNumberish,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setDefaultRoyalty(
      recipient: string,
      bps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenRoyalty(
      tokenId: BigNumberish,
      recipient: string,
      bps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    uri(
      _citizenNFTId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "ApprovalForAll(address,address,bool)"(
      account?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      account?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "CitizenLegislatureChanged(string,uint256)"(
      undefined?: null,
      undefined?: null
    ): CitizenLegislatureChangedEventFilter;
    CitizenLegislatureChanged(
      undefined?: null,
      undefined?: null
    ): CitizenLegislatureChangedEventFilter;

    "DefaultRoyaltySet(address,uint16)"(
      recipient?: null,
      bps?: null
    ): DefaultRoyaltySetEventFilter;
    DefaultRoyaltySet(
      recipient?: null,
      bps?: null
    ): DefaultRoyaltySetEventFilter;

    "LogEthDeposit(address)"(undefined?: null): LogEthDepositEventFilter;
    LogEthDeposit(undefined?: null): LogEthDepositEventFilter;

    "NewCitizen(address,uint256,uint256)"(
      undefined?: null,
      undefined?: null,
      undefined?: null
    ): NewCitizenEventFilter;
    NewCitizen(
      undefined?: null,
      undefined?: null,
      undefined?: null
    ): NewCitizenEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "TokenRoyaltySet(uint256,address,uint16)"(
      tokenId?: null,
      recipient?: null,
      bps?: null
    ): TokenRoyaltySetEventFilter;
    TokenRoyaltySet(
      tokenId?: null,
      recipient?: null,
      bps?: null
    ): TokenRoyaltySetEventFilter;

    "TransferBatch(address,address,address,uint256[],uint256[])"(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      ids?: null,
      values?: null
    ): TransferBatchEventFilter;
    TransferBatch(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      ids?: null,
      values?: null
    ): TransferBatchEventFilter;

    "TransferSingle(address,address,address,uint256,uint256)"(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      id?: null,
      value?: null
    ): TransferSingleEventFilter;
    TransferSingle(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      id?: null,
      value?: null
    ): TransferSingleEventFilter;

    "URI(string,uint256)"(
      value?: null,
      id?: BigNumberish | null
    ): URIEventFilter;
    URI(value?: null, id?: BigNumberish | null): URIEventFilter;
  };

  estimateGas: {
    awardCitizenship(
      _awardees: string[],
      _numberOfCitizenships: BigNumberish[],
      _citizenshipType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeURIs(
      _tokenURIs: string[],
      _citizenNFTIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    defaultRoyalty(overrides?: CallOverrides): Promise<BigNumber>;

    howManyReservedCitizenships(overrides?: CallOverrides): Promise<BigNumber>;

    initialCitizenship(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    inquireAboutHistory(overrides?: CallOverrides): Promise<BigNumber>;

    inquireCostOfEntry(overrides?: CallOverrides): Promise<BigNumber>;

    inquireHousingNumbers(overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    issueNewCitizenships(
      _to: string,
      _citizenType: BigNumberish,
      _numberOfCitizens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    legislateCostOfEntry(
      _stampCost: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onlineApplicationForCitizenship(
      _citizenNumber: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    raidTheCoffers(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reserveCitizenships(
      _numberOfCitizenships: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    royaltyInfo(
      tokenId: BigNumberish,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDefaultRoyalty(
      recipient: string,
      bps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenRoyalty(
      tokenId: BigNumberish,
      recipient: string,
      bps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uri(
      _citizenNFTId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    awardCitizenship(
      _awardees: string[],
      _numberOfCitizenships: BigNumberish[],
      _citizenshipType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeURIs(
      _tokenURIs: string[],
      _citizenNFTIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    defaultRoyalty(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    howManyReservedCitizenships(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialCitizenship(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    inquireAboutHistory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    inquireCostOfEntry(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    inquireHousingNumbers(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    issueNewCitizenships(
      _to: string,
      _citizenType: BigNumberish,
      _numberOfCitizens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    legislateCostOfEntry(
      _stampCost: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onlineApplicationForCitizenship(
      _citizenNumber: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    raidTheCoffers(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reserveCitizenships(
      _numberOfCitizenships: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    royaltyInfo(
      tokenId: BigNumberish,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDefaultRoyalty(
      recipient: string,
      bps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenRoyalty(
      tokenId: BigNumberish,
      recipient: string,
      bps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uri(
      _citizenNFTId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
